// Copyright Epic Games, Inc. All Rights Reserved.

#include "RLibV-UE.h"
#include <Math/NumericLimits.h>

#include <rlibv/disable_dlib_warnings.h>

RLIBV_DISABLE_DLIB_WARNINGS
#include <rlibv/shape_annotation.h>
#include <rlibv/shape_annotation_set.h>
#include <rlibv/linear_pdm.h>
#include <rlibv/shape_refiner.h>
#include <rlibv/keypoint_curve.h>
#include <rlibv/keypoint.h>
#include <dlib/array.h>
#include <dlib/image_processing.h>
#include <dlib/image_io.h>
#include <strstream>
void rlibv::deserialize(rlibv::shape_annotation&, std::istream&);
template<int DIM, int STAGES, int TMODES>
void rlibv::deserialize(rlibv::shape_refiner<DIM, STAGES, TMODES>&, std::istream&);
RLIBV_RENABLE_WARNINGS
#include <thread>

// The binary below is a serialized rlibv::shape_annotation for the full 44 features
// we use in MHA, eg crv_brow_lower_l, pt_iris_top_r. These features, which the refinement
// tracker expects as input, needs to match the features output by the Hyprsense tracker
// in order for the these 2 pieces of core tech to be compatible.
// This binary data is basically akin to the hardwired naming scheme we have in the Hyprsense code.
// Unfortunatly binary data is the easiest way of creating the rlibv::shape_annotation - it cant
// be done through more transparent means.
// Having the binary data in the code, rather than read from external file, means that we can be
// sure the data is valid for the corresponding version of the code. An extrernal file approach
// would have to content with versioning problems as rlibv changes.
//
// The data is generated by taking the 2 shape annotaions sets - upper and lower - which we
// use for MHA. Combining them, creating a rlibv::shape_annotation from them, serializing it out,
// and including them in this file as a hex dump.
// 
// std::ifstream is1("D:/Production/Hyprcube/Refiners/empty_lower.sas", std::ifstream::binary);
// rlibv::shape_annotation_set s1;
// rlibv::deserialize(s1, is1);
//
// std::ifstream is2("D:/Production/Hyprcube/Refiners/empty_upper.sas", std::ifstream::binary);
// rlibv::shape_annotation_set s2;
// rlibv::deserialize(s2, is2);
// 
// std::map<std::string, rlibv::keypoint_curve> keypoint_curves;
// for (const auto& d : s1.prototype()->keypoint_curves())
// {
//	  keypoint_curves[d.first] = d.second;
// }
// for (const auto& d : s2.prototype()->keypoint_curves())
// {
//    keypoint_curves[d.first] = d.second;
// }
//
// std::map<std::string, rlibv::keypoint> keypoints;
// for (const auto& d : s1.prototype()->keypoints())
// {
//	  keypoints[d.first] = d.second;
// }
// for (const auto& d : s2.prototype()->keypoints())
// {
//	  keypoints[d.first] = d.second;
// }
//
// rlibv::shape_annotation s3("", keypoints, keypoint_curves);
//
// std::ofstream os1("D:/tmp/output.bin", std::ifstream::binary);
// rlibv::serialize(s3, os1);

static const uint8 SerializedShapeAnnotation[] = {
0x01, 0x00, 0x01, 0x16, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x01, 0x03, 0xcd, 0xcc, 0x8c, 0x81, 0x18, 0x03, 0x9a, 0x99,
0x99, 0x81, 0x19, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x6e,
0x65, 0x72, 0x5f, 0x72, 0x01, 0x01, 0x03, 0x66, 0x66, 0xe6, 0x81, 0x19, 0x03, 0x9a, 0x99, 0x99,
0x81, 0x19, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x65,
0x72, 0x5f, 0x6c, 0x01, 0x01, 0x03, 0xcd, 0xcc, 0xcc, 0x81, 0x18, 0x03, 0x9a, 0x99, 0x99, 0x81,
0x19, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72,
0x5f, 0x72, 0x01, 0x01, 0x03, 0xcd, 0xcc, 0xcc, 0x81, 0x1a, 0x03, 0x9a, 0x99, 0x99, 0x81, 0x19,
0x01, 0x15, 0x70, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f,
0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x01, 0x03, 0xcd, 0xcc, 0x8c, 0x81, 0x18, 0x01,
0x80, 0x81, 0x08, 0x01, 0x15, 0x70, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x6e,
0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x01, 0x03, 0x66, 0x66, 0xe6,
0x81, 0x19, 0x01, 0x80, 0x81, 0x08, 0x01, 0x15, 0x70, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63,
0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x01, 0x03,
0xcd, 0xcc, 0xcc, 0x81, 0x18, 0x01, 0x80, 0x81, 0x08, 0x01, 0x15, 0x70, 0x74, 0x5f, 0x65, 0x79,
0x65, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72,
0x01, 0x01, 0x03, 0xcd, 0xcc, 0xcc, 0x81, 0x1a, 0x01, 0x80, 0x81, 0x08, 0x01, 0x0d, 0x70, 0x74,
0x5f, 0x69, 0x72, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x01, 0x00, 0x03, 0x1f, 0x85,
0xab, 0x81, 0x18, 0x01, 0x80, 0x81, 0x08, 0x01, 0x0d, 0x70, 0x74, 0x5f, 0x69, 0x72, 0x69, 0x73,
0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x01, 0x00, 0x03, 0x0a, 0xd7, 0xa3, 0x81, 0x19, 0x01, 0x80,
0x81, 0x08, 0x01, 0x14, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72,
0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x01, 0x00, 0x01, 0x80, 0x81, 0x08, 0x03, 0xcd,
0xcc, 0x8c, 0x81, 0x18, 0x01, 0x14, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x77,
0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x01, 0x00, 0x01, 0x80, 0x81, 0x08,
0x03, 0x9a, 0x99, 0x99, 0x81, 0x18, 0x01, 0x11, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x70,
0x68, 0x69, 0x6c, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x6c, 0x01, 0x00, 0x03, 0x9a, 0x99, 0x99, 0x81,
0x18, 0x03, 0xcd, 0xcc, 0xcc, 0x81, 0x19, 0x01, 0x11, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70, 0x5f,
0x70, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x72, 0x01, 0x00, 0x03, 0xcd, 0xcc, 0xcc,
0x81, 0x19, 0x03, 0xcd, 0xcc, 0xcc, 0x81, 0x19, 0x01, 0x14, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70,
0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x01, 0x00,
0x01, 0x80, 0x81, 0x08, 0x03, 0x33, 0x33, 0xf3, 0x81, 0x19, 0x01, 0x14, 0x70, 0x74, 0x5f, 0x6c,
0x69, 0x70, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d,
0x01, 0x00, 0x01, 0x80, 0x81, 0x08, 0x03, 0x66, 0x66, 0xe6, 0x81, 0x19, 0x01, 0x11, 0x70, 0x74,
0x5f, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01,
0x01, 0x03, 0xcd, 0xcc, 0xcc, 0x81, 0x18, 0x01, 0x80, 0x81, 0x08, 0x01, 0x11, 0x70, 0x74, 0x5f,
0x6d, 0x6f, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x01,
0x03, 0xcd, 0xcc, 0xcc, 0x81, 0x1a, 0x01, 0x80, 0x81, 0x08, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x6e,
0x61, 0x73, 0x6f, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x01, 0x03, 0x66, 0x66,
0xe6, 0x81, 0x18, 0x01, 0x80, 0x81, 0x08, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x73, 0x6f,
0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x01, 0x03, 0xcd, 0xcc, 0xcc, 0x81, 0x1b,
0x01, 0x80, 0x81, 0x08, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x73, 0x6f, 0x5f, 0x75, 0x70,
0x70, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x01, 0x03, 0x33, 0x33, 0xb3, 0x81, 0x18, 0x03, 0x9a, 0x99,
0x99, 0x81, 0x19, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x73, 0x6f, 0x5f, 0x75, 0x70, 0x70,
0x65, 0x72, 0x5f, 0x72, 0x01, 0x01, 0x03, 0x9a, 0x99, 0x99, 0x81, 0x19, 0x03, 0x9a, 0x99, 0x99,
0x81, 0x19, 0x01, 0x16, 0x01, 0x10, 0x63, 0x72, 0x76, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f, 0x6c,
0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f,
0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77,
0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x00, 0x01, 0x03, 0xc9, 0xfa, 0x0e, 0x01,
0x10, 0x63, 0x72, 0x76, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
0x72, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
0x5f, 0x72, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x65,
0x72, 0x5f, 0x72, 0x01, 0x00, 0x01, 0x03, 0x14, 0x32, 0xf4, 0x01, 0x10, 0x63, 0x72, 0x76, 0x5f,
0x62, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x0f, 0x70, 0x74,
0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x0f, 0x70,
0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x00,
0x01, 0x03, 0x78, 0x96, 0xcc, 0x01, 0x10, 0x63, 0x72, 0x76, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x5f,
0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77,
0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x62, 0x72, 0x6f,
0x77, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x00, 0x01, 0x03, 0xc8, 0x96, 0xcc,
0x01, 0x12, 0x63, 0x72, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x77,
0x65, 0x72, 0x5f, 0x6c, 0x01, 0x15, 0x70, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x72,
0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x15, 0x70, 0x74, 0x5f,
0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72,
0x5f, 0x6c, 0x01, 0x00, 0x01, 0x03, 0x0c, 0xaa, 0x78, 0x01, 0x12, 0x63, 0x72, 0x76, 0x5f, 0x65,
0x79, 0x65, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x15, 0x70,
0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e,
0x65, 0x72, 0x5f, 0x72, 0x01, 0x15, 0x70, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x72,
0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x00, 0x01, 0x03, 0x78,
0x96, 0xcc, 0x01, 0x12, 0x63, 0x72, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x6c, 0x69, 0x64, 0x5f, 0x75,
0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x15, 0x70, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63,
0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x15, 0x70,
0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74,
0x65, 0x72, 0x5f, 0x6c, 0x01, 0x00, 0x01, 0x03, 0x3c, 0xaa, 0x0c, 0x01, 0x12, 0x63, 0x72, 0x76,
0x5f, 0x65, 0x79, 0x65, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x01,
0x15, 0x70, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x69,
0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x15, 0x70, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63,
0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x00, 0x01,
0x03, 0x78, 0xaa, 0x0c, 0x01, 0x0a, 0x63, 0x72, 0x76, 0x5f, 0x69, 0x72, 0x69, 0x73, 0x5f, 0x6c,
0x01, 0x0d, 0x70, 0x74, 0x5f, 0x69, 0x72, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x01,
0x0d, 0x70, 0x74, 0x5f, 0x69, 0x72, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x01, 0x01,
0x03, 0x1f, 0x85, 0xab, 0x81, 0x18, 0x03, 0xcd, 0xcc, 0x8c, 0x81, 0x18, 0x01, 0x03, 0xa0, 0x11,
0xc8, 0x01, 0x0a, 0x63, 0x72, 0x76, 0x5f, 0x69, 0x72, 0x69, 0x73, 0x5f, 0x72, 0x01, 0x0d, 0x70,
0x74, 0x5f, 0x69, 0x72, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x01, 0x0d, 0x70, 0x74,
0x5f, 0x69, 0x72, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x01, 0x01, 0x03, 0x0a, 0xd7,
0xa3, 0x81, 0x19, 0x03, 0xcd, 0xcc, 0x8c, 0x81, 0x18, 0x01, 0x03, 0x5a, 0xaa, 0xa0, 0x01, 0x15,
0x63, 0x72, 0x76, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e,
0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x14, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x6c, 0x6f,
0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x01, 0x11, 0x70, 0x74, 0x5f,
0x6d, 0x6f, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x00,
0x01, 0x03, 0x0c, 0xaa, 0x3c, 0x01, 0x15, 0x63, 0x72, 0x76, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x6c,
0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x14, 0x70, 0x74,
0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
0x5f, 0x6d, 0x01, 0x11, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x72,
0x6e, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x00, 0x01, 0x03, 0x3c, 0xaa, 0x0c, 0x01, 0x15, 0x63, 0x72,
0x76, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65,
0x72, 0x5f, 0x6c, 0x01, 0x14, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x65,
0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x01, 0x11, 0x70, 0x74, 0x5f, 0x6d, 0x6f,
0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x00, 0x01, 0x03,
0x0c, 0xaa, 0x78, 0x01, 0x15, 0x63, 0x72, 0x76, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x77,
0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x14, 0x70, 0x74, 0x5f, 0x6c,
0x69, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d,
0x01, 0x11, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65,
0x72, 0x5f, 0x72, 0x01, 0x00, 0x01, 0x03, 0x78, 0xaa, 0x0c, 0x01, 0x12, 0x63, 0x72, 0x76, 0x5f,
0x6c, 0x69, 0x70, 0x5f, 0x70, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x6c, 0x01, 0x14,
0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74,
0x65, 0x72, 0x5f, 0x6d, 0x01, 0x11, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x68, 0x69,
0x6c, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x6c, 0x01, 0x00, 0x01, 0x03, 0xc9, 0xfa, 0x0e, 0x01, 0x12,
0x63, 0x72, 0x76, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x75, 0x6d,
0x5f, 0x72, 0x01, 0x14, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72,
0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x01, 0x11, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70,
0x5f, 0x70, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x72, 0x01, 0x00, 0x01, 0x03, 0xc8,
0x96, 0xcc, 0x01, 0x15, 0x63, 0x72, 0x76, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x75, 0x70, 0x70, 0x65,
0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x14, 0x70, 0x74, 0x5f, 0x6c, 0x69,
0x70, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x01,
0x11, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72,
0x5f, 0x6c, 0x01, 0x00, 0x01, 0x03, 0x5a, 0xaa, 0xa0, 0x01, 0x15, 0x63, 0x72, 0x76, 0x5f, 0x6c,
0x69, 0x70, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72,
0x01, 0x14, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69,
0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x01, 0x11, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x74, 0x68,
0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x00, 0x01, 0x03, 0x3c, 0x82, 0x66,
0x01, 0x15, 0x63, 0x72, 0x76, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x11, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x70, 0x5f,
0x70, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x6c, 0x01, 0x11, 0x70, 0x74, 0x5f, 0x6d,
0x6f, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x00, 0x01,
0x03, 0x78, 0x96, 0xcc, 0x01, 0x15, 0x63, 0x72, 0x76, 0x5f, 0x6c, 0x69, 0x70, 0x5f, 0x75, 0x70,
0x70, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x11, 0x70, 0x74, 0x5f,
0x6c, 0x69, 0x70, 0x5f, 0x70, 0x68, 0x69, 0x6c, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x72, 0x01, 0x11,
0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f,
0x72, 0x01, 0x00, 0x01, 0x03, 0x14, 0x32, 0xf4, 0x01, 0x10, 0x63, 0x72, 0x76, 0x5f, 0x6e, 0x61,
0x73, 0x6f, 0x6c, 0x61, 0x62, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x6e,
0x61, 0x73, 0x6f, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x0f, 0x70, 0x74, 0x5f,
0x6e, 0x61, 0x73, 0x6f, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x01, 0x00, 0x01, 0x03,
0xa0, 0x11, 0xc8, 0x01, 0x10, 0x63, 0x72, 0x76, 0x5f, 0x6e, 0x61, 0x73, 0x6f, 0x6c, 0x61, 0x62,
0x69, 0x61, 0x6c, 0x5f, 0x72, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x73, 0x6f, 0x5f, 0x75,
0x70, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x0f, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x73, 0x6f, 0x5f,
0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x01, 0x00, 0x01, 0x03, 0xbe, 0x11, 0x64
};

const int DIM = 8;
const int STAGES = 3;
const int TMODES = 10;

class FRLibVRefinementTracker::FImpl
{
public:
	FImpl(): 
		ThreadPool(std::thread::hardware_concurrency())
	{
	}

	rlibv::shape_refiner<DIM, STAGES, TMODES> Refiner;
	rlibv::shape_annotation FullShapeAnnotation;
	rlibv::shape_annotation RefinerShapeAnnotation;
	dlib::thread_pool ThreadPool;

};

FRLibVRefinementTracker::FRLibVRefinementTracker()
{
	try
	{
		Impl = MakeUnique<FImpl>(); 
	}
	catch (...)
	{
		checkf(false, TEXT("Exception"));
	}
}

FRLibVRefinementTracker::~FRLibVRefinementTracker()
{
	try
	{
		Impl = nullptr;
	}
	catch (...)
	{
		checkf(false, TEXT("Exception"));
	}
}

bool FRLibVRefinementTracker::Initialize(const FString& InModelFile)
{
	try
	{
		std::ifstream ModelStream(*InModelFile, std::ifstream::binary);
		std::istrstream AnnotationStream(reinterpret_cast<const char*>(SerializedShapeAnnotation), sizeof(SerializedShapeAnnotation));

		if (ModelStream && AnnotationStream)
		{
			rlibv::deserialize(Impl->Refiner, ModelStream);

			if (!Impl->Refiner.is_trained())
			{
				ErrorMessage = TEXT("Not trained");
				return false;
			}

			rlibv::deserialize(Impl->FullShapeAnnotation, AnnotationStream);

			// The FullShapeAnnotation contains all possible curves the refiner could be using.
			// We need to create RefinerShapeAnnotation that is the sub-set of those that the refiner is actually using.

			const std::map<std::string, rlibv::keypoint_curve>& FullKeypointCurves = Impl->FullShapeAnnotation.keypoint_curves();
			const std::map<std::string, rlibv::keypoint>& FullKeypoints = Impl->FullShapeAnnotation.keypoints();

			std::map<std::string, rlibv::keypoint_curve> RefinerKeypointCurves;
			std::map<std::string, rlibv::keypoint> RefinerKeypoints;

			for (const auto& Curve : Impl->Refiner.get_curve_lookup())
			{
				if (FullKeypointCurves.find(Curve.first) != FullKeypointCurves.end())
				{
					RefinerKeypointCurves[Curve.first] = FullKeypointCurves.at(Curve.first);

					RefinerKeypoints[RefinerKeypointCurves[Curve.first].start_keypoint_name] = FullKeypoints.at(RefinerKeypointCurves[Curve.first].start_keypoint_name);
					RefinerKeypoints[RefinerKeypointCurves[Curve.first].end_keypoint_name] = FullKeypoints.at(RefinerKeypointCurves[Curve.first].end_keypoint_name);
				}
				else
				{
					ErrorMessage = TEXT("Refiner contains unknown curve");
					return false;
				}
			}

			Impl->RefinerShapeAnnotation = rlibv::shape_annotation("", RefinerKeypoints, RefinerKeypointCurves);
		}
		else
		{
			ErrorMessage = TEXT("Failed to find file");
			return false;
		}

		return true;
	}
	catch (...)
	{
		ErrorMessage = TEXT("Exception");
		return false;
	}
}

bool FRLibVRefinementTracker::Track(int32 InWidth, int32 InHeight, const TArray<uint8>& InImageData, const FFrameTrackingContourData& InContours, FFrameTrackingContourData& OutContours, FFrameTrackingConfidenceData& OutConfidence)
{
	try
	{
		OutContours.TrackingContours.Reset();
		OutConfidence.Value = 0;

		// Ensure passed in contours match FullShapeAnnotation

		const std::map<std::string, rlibv::keypoint_curve>& FullKeypointCurves = Impl->FullShapeAnnotation.keypoint_curves();
		const std::map<std::string, rlibv::keypoint>& FullKeypoints = Impl->FullShapeAnnotation.keypoints();

		if (FullKeypointCurves.size() + FullKeypoints.size() != InContours.TrackingContours.Num())
		{
			ErrorMessage = TEXT("Annotation scheme size mismatch");
			return false;
		}

		for (const auto& KeypointCurve : FullKeypointCurves)
		{
			if (!InContours.TrackingContours.Contains(UTF8_TO_TCHAR(KeypointCurve.first.c_str())))
			{
				ErrorMessage = TEXT("Annotation scheme keypoint curve mismatch");
				return false;
			}
		}

		for (const auto& Keypoint : FullKeypoints)
		{
			if (!InContours.TrackingContours.Contains(UTF8_TO_TCHAR(Keypoint.first.c_str())))
			{
				ErrorMessage = TEXT("Annotation scheme keypoint mismatch");
				return false;
			}
		}

		// Create the sub-set of passing in tracking points that are to be refined

		std::vector<rlibv::point2d<double>> RefinerPoints;
		std::map<std::string, std::vector<int>> RefinerCurveLookup;

		if (InWidth > 0 && InHeight > 0)
		{
			const std::map<std::string, rlibv::keypoint_curve>& RefinerKeypointCurves = Impl->RefinerShapeAnnotation.keypoint_curves();
			const std::map<std::string, rlibv::keypoint>& RefinerKeypoints = Impl->RefinerShapeAnnotation.keypoints();
			int32 Index = 0;

			for (const auto& Contour : InContours.TrackingContours)
			{
				std::string Name = TCHAR_TO_UTF8(*Contour.Key);

				if (RefinerKeypointCurves.find(Name) == RefinerKeypointCurves.end())
				{
					OutContours.TrackingContours.Add(Contour.Key, Contour.Value); // This contour not refined, pass through to output
				}
				else
				{
					RefinerCurveLookup[Name].reserve(Contour.Value.DensePoints.Num());

					for (const FVector2D& Point : Contour.Value.DensePoints)
					{
						rlibv::point2d<double> NormalizedPoint;
						NormalizedPoint.x() = static_cast<double>(Point.X) / static_cast<double>(InWidth);
						NormalizedPoint.y() = static_cast<double>(Point.Y) / static_cast<double>(InHeight);

						RefinerPoints.push_back(NormalizedPoint);
						RefinerCurveLookup[Name].push_back(Index++);
					}
				}
			}
		}

		// Do refinement

		if (RefinerPoints.size() > 0)
		{
			Impl->RefinerShapeAnnotation.set_from_dense_points(RefinerPoints, RefinerCurveLookup);
			const int32 NumIterations = 10;
			const int32 NumBasisFunctions = 50;
			Impl->RefinerShapeAnnotation = Impl->Refiner.refine(InImageData.GetData(), InHeight, InWidth, Impl->RefinerShapeAnnotation, NumIterations, NumBasisFunctions, Impl->ThreadPool, OutConfidence.Value);

			std::map<std::string, int> CurvePointDensity;
			for (const auto& Curve : RefinerCurveLookup)
			{
				CurvePointDensity[Curve.first] = Curve.second.size();
			}

			std::vector<std::vector<int>> InboundLinks;
			std::vector<std::vector<int>> OutboundLinks;
			std::map<std::string, std::vector<int>> NewCurveLookup;
			std::map<std::string, int> KeypointLookup;
			RefinerPoints = Impl->RefinerShapeAnnotation.get_dense_points(InWidth, InHeight, InboundLinks, OutboundLinks, NewCurveLookup, KeypointLookup, CurvePointDensity);

			for (const auto& Curve : NewCurveLookup)
			{
				FString name(FString(Curve.first.c_str()));
				OutContours.TrackingContours.Add(name);

				OutContours.TrackingContours[name].DensePoints.Reserve(Curve.second.size());
				for (const int32 Index : Curve.second)
				{
					OutContours.TrackingContours[name].DensePoints.Add(FVector2D(RefinerPoints[Index].x(), RefinerPoints[Index].y()));
				}
			}
		}

		return true;
	}
	catch (...)
	{
		ErrorMessage = TEXT("Exception");
		return false;
	}
}